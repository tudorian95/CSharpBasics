/*4. Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed 1000, find the sum of the even-valued terms.*/
//5. Find the sum of digits of a number read from the keyboard.*/

//1. Write a program that reads a number from the keyboard. Check whether that number is divisible by 7 and 11 or not.
using System.ComponentModel.Design;

void divisible()
{
    Console.WriteLine("Pick a number, let's see if it's divisible by both 7 and 11");
    int a = int.Parse(Console.ReadLine());
    if (a % 7 == 0 && a % 11 == 0)
    {
        Console.WriteLine("The number you have chosen is divisible by both 7 and 11");
    }
    else { Console.WriteLine("Alas, your number does not satisfy our requirements"); }
}

//divisible();
//LeapYear();
PrimeAtGivenPosition(46);
//2. Check whether a given year is leap year or not.
/*
1 If the year is evenly divisible by 4, go to step 2. Otherwise, go to step 5.
2 If the year is evenly divisible by 100, go to step 3. Otherwise, go to step 4.
3 If the year is evenly divisible by 400, go to step 4. Otherwise, go to step 5.
4 The year is a leap year (it has 366 days).
5 The year is not a leap year (it has 365 days).
 */

void LeapYear()
{
    Console.WriteLine("Pick a year, let's see if it's a leap year or not");
    int a = int.Parse(Console.ReadLine());
    if (a % 4 == 0)
    {
        if (a % 100 == 0)
        {
            if (a % 400 == 0)
            {
                Console.WriteLine("leap year");
                return;
            }
            Console.WriteLine("not leap year");
            return;
        }
        Console.WriteLine("leap year");
        return;
    }
    Console.WriteLine("not leap year");
}

//3. By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13. What is the 47th prime number?
bool isPrime(int number)
{

    if (number < 2) return false;
    if (number == 2) return true;
    if (number % 2 == 0) return false;
    for (int i = 3; (i * i) <= number; i += 2)
    {
        if (number % i == 0) return false;
    }
    return true;

}
void PrimeAtGivenPosition(int position)
{
    int count = 0;

    int i = 0;

    while (count <= position)
    {
        if (isPrime(i))
        {
            count++;
            if (count == position)
                Console.WriteLine(i);
        }
        i++;
    }
    Console.ReadLine();
}

